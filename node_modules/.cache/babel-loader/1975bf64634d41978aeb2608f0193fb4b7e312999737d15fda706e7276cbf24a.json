{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useReducer, useRef } from 'react';\n\n/**\r\n * Represents the state of an HTTP request.\r\n * @template T - The type of data expected in the response.\r\n * @interface State\r\n * @property {T | undefined} data - The data received from the HTTP request.\r\n * @property {Error | undefined} error - An error object if the request encounters an error.\r\n */\n\n/**\r\n * Represents a cache of data for different URLs.\r\n * @template T - The type of data stored in the cache.\r\n * @type {object} Cache\r\n */\n\n/**\r\n * Represents the possible actions that can be dispatched in the fetchReducer.\r\n * @template T - The type of data expected in the response.\r\n * @type {object} Action\r\n */\n\n/**\r\n * Custom hook for making HTTP requests and managing the state of the request.\r\n * @template T - The type of data expected in the response.\r\n * @param {string | undefined} url - The URL to make the HTTP request to.\r\n * @param {RequestInit} [options] - The [options for the HTTP request]() (optional).\r\n * @returns {State<T>} The state object representing the result of the HTTP request.\r\n * @see [Documentation](https://usehooks-ts.com/react-hook/use-fetch)\r\n * @see [MDN Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\r\n * @example\r\n * const { data, error } = useFetch<User>('https://api.example.com/user');\r\n */\nexport function useFetch(url, options) {\n  _s();\n  const cache = useRef({});\n\n  // Used to prevent state update if the component is unmounted\n  const cancelRequest = useRef(false);\n  const initialState = {\n    error: undefined,\n    data: undefined\n  };\n\n  // Keep state logic separated\n  const fetchReducer = (state, action) => {\n    switch (action.type) {\n      case 'loading':\n        return {\n          ...initialState\n        };\n      case 'fetched':\n        return {\n          ...initialState,\n          data: action.payload\n        };\n      case 'error':\n        return {\n          ...initialState,\n          error: action.payload\n        };\n      default:\n        return state;\n    }\n  };\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n  useEffect(() => {\n    // Do nothing if the url is not given\n    if (!url) return;\n    cancelRequest.current = false;\n    const fetchData = async () => {\n      dispatch({\n        type: 'loading'\n      });\n\n      // If a cache exists for this url, return it\n      if (cache.current[url]) {\n        dispatch({\n          type: 'fetched',\n          payload: cache.current[url]\n        });\n        return;\n      }\n      try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        const data = await response.json();\n        cache.current[url] = data;\n        if (cancelRequest.current) return;\n        dispatch({\n          type: 'fetched',\n          payload: data\n        });\n      } catch (error) {\n        if (cancelRequest.current) return;\n        dispatch({\n          type: 'error',\n          payload: error\n        });\n      }\n    };\n    void fetchData();\n\n    // Use the cleanup function for avoiding a possibly...\n    // ...state update after the component was unmounted\n    return () => {\n      cancelRequest.current = true;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n  return state;\n}\n_s(useFetch, \"VsMM40DIV/UGg8qhn/RBHS1FIYY=\");","map":{"version":3,"names":["useEffect","useReducer","useRef","useFetch","url","options","_s","cache","cancelRequest","initialState","error","undefined","data","fetchReducer","state","action","type","payload","dispatch","current","fetchData","response","fetch","ok","Error","statusText","json"],"sources":["/home/kartikay/React/twitter-frontend/src/hooks/useFetch.ts"],"sourcesContent":["import { useEffect, useReducer, useRef } from 'react'\r\n\r\n/**\r\n * Represents the state of an HTTP request.\r\n * @template T - The type of data expected in the response.\r\n * @interface State\r\n * @property {T | undefined} data - The data received from the HTTP request.\r\n * @property {Error | undefined} error - An error object if the request encounters an error.\r\n */\r\ninterface State<T> {\r\n  data?: T\r\n  error?: Error\r\n}\r\n\r\n/**\r\n * Represents a cache of data for different URLs.\r\n * @template T - The type of data stored in the cache.\r\n * @type {object} Cache\r\n */\r\ntype Cache<T> = { [url: string]: T }\r\n\r\n/**\r\n * Represents the possible actions that can be dispatched in the fetchReducer.\r\n * @template T - The type of data expected in the response.\r\n * @type {object} Action\r\n */\r\ntype Action<T> =\r\n  /** Indicates that the request is in progress. */\r\n  | { type: 'loading' }\r\n  /** Indicates that the request has been successfully fetched. */\r\n  | { type: 'fetched'; payload: T }\r\n  /** Indicates that an error occurred during the request. */\r\n  | { type: 'error'; payload: Error }\r\n\r\n/**\r\n * Custom hook for making HTTP requests and managing the state of the request.\r\n * @template T - The type of data expected in the response.\r\n * @param {string | undefined} url - The URL to make the HTTP request to.\r\n * @param {RequestInit} [options] - The [options for the HTTP request]() (optional).\r\n * @returns {State<T>} The state object representing the result of the HTTP request.\r\n * @see [Documentation](https://usehooks-ts.com/react-hook/use-fetch)\r\n * @see [MDN Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)\r\n * @example\r\n * const { data, error } = useFetch<User>('https://api.example.com/user');\r\n */\r\nexport function useFetch<T = unknown>(\r\n  url?: string,\r\n  options?: RequestInit,\r\n): State<T> {\r\n  const cache = useRef<Cache<T>>({})\r\n\r\n  // Used to prevent state update if the component is unmounted\r\n  const cancelRequest = useRef<boolean>(false)\r\n\r\n  const initialState: State<T> = {\r\n    error: undefined,\r\n    data: undefined,\r\n  }\r\n\r\n  // Keep state logic separated\r\n  const fetchReducer = (state: State<T>, action: Action<T>): State<T> => {\r\n    switch (action.type) {\r\n      case 'loading':\r\n        return { ...initialState }\r\n      case 'fetched':\r\n        return { ...initialState, data: action.payload }\r\n      case 'error':\r\n        return { ...initialState, error: action.payload }\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n\r\n  const [state, dispatch] = useReducer(fetchReducer, initialState)\r\n\r\n  useEffect(() => {\r\n    // Do nothing if the url is not given\r\n    if (!url) return\r\n\r\n    cancelRequest.current = false\r\n\r\n    const fetchData = async () => {\r\n      dispatch({ type: 'loading' })\r\n\r\n      // If a cache exists for this url, return it\r\n      if (cache.current[url]) {\r\n        dispatch({ type: 'fetched', payload: cache.current[url] })\r\n        return\r\n      }\r\n\r\n      try {\r\n        const response = await fetch(url, options)\r\n        if (!response.ok) {\r\n          throw new Error(response.statusText)\r\n        }\r\n\r\n        const data = (await response.json()) as T\r\n        cache.current[url] = data\r\n        if (cancelRequest.current) return\r\n\r\n        dispatch({ type: 'fetched', payload: data })\r\n      } catch (error) {\r\n        if (cancelRequest.current) return\r\n\r\n        dispatch({ type: 'error', payload: error as Error })\r\n      }\r\n    }\r\n\r\n    void fetchData()\r\n\r\n    // Use the cleanup function for avoiding a possibly...\r\n    // ...state update after the component was unmounted\r\n    return () => {\r\n      cancelRequest.current = true\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [url])\r\n\r\n  return state\r\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQA,CACtBC,GAAY,EACZC,OAAqB,EACX;EAAAC,EAAA;EACV,MAAMC,KAAK,GAAGL,MAAM,CAAW,CAAC,CAAC,CAAC;;EAElC;EACA,MAAMM,aAAa,GAAGN,MAAM,CAAU,KAAK,CAAC;EAE5C,MAAMO,YAAsB,GAAG;IAC7BC,KAAK,EAAEC,SAAS;IAChBC,IAAI,EAAED;EACR,CAAC;;EAED;EACA,MAAME,YAAY,GAAGA,CAACC,KAAe,EAAEC,MAAiB,KAAe;IACrE,QAAQA,MAAM,CAACC,IAAI;MACjB,KAAK,SAAS;QACZ,OAAO;UAAE,GAAGP;QAAa,CAAC;MAC5B,KAAK,SAAS;QACZ,OAAO;UAAE,GAAGA,YAAY;UAAEG,IAAI,EAAEG,MAAM,CAACE;QAAQ,CAAC;MAClD,KAAK,OAAO;QACV,OAAO;UAAE,GAAGR,YAAY;UAAEC,KAAK,EAAEK,MAAM,CAACE;QAAQ,CAAC;MACnD;QACE,OAAOH,KAAK;IAChB;EACF,CAAC;EAED,MAAM,CAACA,KAAK,EAAEI,QAAQ,CAAC,GAAGjB,UAAU,CAACY,YAAY,EAAEJ,YAAY,CAAC;EAEhET,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACI,GAAG,EAAE;IAEVI,aAAa,CAACW,OAAO,GAAG,KAAK;IAE7B,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BF,QAAQ,CAAC;QAAEF,IAAI,EAAE;MAAU,CAAC,CAAC;;MAE7B;MACA,IAAIT,KAAK,CAACY,OAAO,CAACf,GAAG,CAAC,EAAE;QACtBc,QAAQ,CAAC;UAAEF,IAAI,EAAE,SAAS;UAAEC,OAAO,EAAEV,KAAK,CAACY,OAAO,CAACf,GAAG;QAAE,CAAC,CAAC;QAC1D;MACF;MAEA,IAAI;QACF,MAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAClB,GAAG,EAAEC,OAAO,CAAC;QAC1C,IAAI,CAACgB,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAACH,QAAQ,CAACI,UAAU,CAAC;QACtC;QAEA,MAAMb,IAAI,GAAI,MAAMS,QAAQ,CAACK,IAAI,CAAC,CAAO;QACzCnB,KAAK,CAACY,OAAO,CAACf,GAAG,CAAC,GAAGQ,IAAI;QACzB,IAAIJ,aAAa,CAACW,OAAO,EAAE;QAE3BD,QAAQ,CAAC;UAAEF,IAAI,EAAE,SAAS;UAAEC,OAAO,EAAEL;QAAK,CAAC,CAAC;MAC9C,CAAC,CAAC,OAAOF,KAAK,EAAE;QACd,IAAIF,aAAa,CAACW,OAAO,EAAE;QAE3BD,QAAQ,CAAC;UAAEF,IAAI,EAAE,OAAO;UAAEC,OAAO,EAAEP;QAAe,CAAC,CAAC;MACtD;IACF,CAAC;IAED,KAAKU,SAAS,CAAC,CAAC;;IAEhB;IACA;IACA,OAAO,MAAM;MACXZ,aAAa,CAACW,OAAO,GAAG,IAAI;IAC9B,CAAC;IACD;EACF,CAAC,EAAE,CAACf,GAAG,CAAC,CAAC;EAET,OAAOU,KAAK;AACd;AAACR,EAAA,CA1EeH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}